# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Experience {
  id: ID!
  companyName: String
  positionTitle: String
  description: Experience_description_Document
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
}

type Experience_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ExperienceWhereUniqueInput {
  id: ID
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  companyName: StringFilter
  positionTitle: StringFilter
  skills: SkillManyRelationFilter
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  companyName: OrderDirection
  positionTitle: OrderDirection
}

input ExperienceUpdateInput {
  companyName: String
  positionTitle: String
  description: JSON
  skills: SkillRelateToManyForUpdateInput
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  companyName: String
  positionTitle: String
  description: JSON
  skills: SkillRelateToManyForCreateInput
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Skill {
  id: ID!
  name: String
  description: Skill_description_Document
  logo: SkillLogo
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experiencesCount(where: ExperienceWhereInput! = {}): Int
}

type Skill_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  name: StringFilter
  logo: SkillLogoWhereInput
  experiences: ExperienceManyRelationFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input SkillOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SkillUpdateInput {
  name: String
  description: JSON
  logo: SkillLogoRelateToOneForUpdateInput
  experiences: ExperienceRelateToManyForUpdateInput
}

input SkillLogoRelateToOneForUpdateInput {
  create: SkillLogoCreateInput
  connect: SkillLogoWhereUniqueInput
  disconnect: Boolean
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  name: String
  description: JSON
  logo: SkillLogoRelateToOneForCreateInput
  experiences: ExperienceRelateToManyForCreateInput
}

input SkillLogoRelateToOneForCreateInput {
  create: SkillLogoCreateInput
  connect: SkillLogoWhereUniqueInput
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type SkillLogo {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  skill: Skill
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """ Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input SkillLogoWhereUniqueInput {
  id: ID
}

input SkillLogoWhereInput {
  AND: [SkillLogoWhereInput!]
  OR: [SkillLogoWhereInput!]
  NOT: [SkillLogoWhereInput!]
  id: IDFilter
  altText: StringFilter
  skill: SkillWhereInput
}

input SkillLogoOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input SkillLogoUpdateInput {
  image: Upload
  altText: String
  skill: SkillRelateToOneForUpdateInput
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input SkillRelateToOneForUpdateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
  disconnect: Boolean
}

input SkillLogoUpdateArgs {
  where: SkillLogoWhereUniqueInput!
  data: SkillLogoUpdateInput!
}

input SkillLogoCreateInput {
  image: Upload
  altText: String
  skill: SkillRelateToOneForCreateInput
}

input SkillRelateToOneForCreateInput {
  create: SkillCreateInput
  connect: SkillWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(where: ExperienceWhereUniqueInput!, data: ExperienceUpdateInput!): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createSkillLogo(data: SkillLogoCreateInput!): SkillLogo
  createSkillLogos(data: [SkillLogoCreateInput!]!): [SkillLogo]
  updateSkillLogo(where: SkillLogoWhereUniqueInput!, data: SkillLogoUpdateInput!): SkillLogo
  updateSkillLogos(data: [SkillLogoUpdateArgs!]!): [SkillLogo]
  deleteSkillLogo(where: SkillLogoWhereUniqueInput!): SkillLogo
  deleteSkillLogos(where: [SkillLogoWhereUniqueInput!]!): [SkillLogo]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  experiences(where: ExperienceWhereInput! = {}, orderBy: [ExperienceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExperienceWhereUniqueInput): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  skillLogos(where: SkillLogoWhereInput! = {}, orderBy: [SkillLogoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillLogoWhereUniqueInput): [SkillLogo!]
  skillLogo(where: SkillLogoWhereUniqueInput!): SkillLogo
  skillLogosCount(where: SkillLogoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
